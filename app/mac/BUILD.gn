import("//build/buildflag_header.gni")
import("//build/config/chrome_build.gni")
import("//build/config/compiler/compiler.gni")
import("//build/config/features.gni")
import("//build/config/locales.gni")
import("//build/config/sanitizers/sanitizers.gni")
import("//build/config/ui.gni")
import("//ui/base/ui_features.gni")
import("//v8/gni/v8.gni")
import("//build/compiled_action.gni")
import("//build/config/mac/rules.gni")
import("//build/config/mac/symbols.gni")
import("//build/mac/tweak_info_plist.gni")
import("//build/util/branding.gni")
import("//build/config/zip.gni")
import("//media/cdm/ppapi/cdm_paths.gni")
import("//electron/build/config.gni")

chrome_version_full = "Frameworks"
chrome_framework_name = chrome_product_full_name + " Framework"
chrome_helper_name = chrome_product_full_name + " Helper"

tweak_info_plist("electron_app_plist") {
  info_plist = "resources/app-Info.plist"
  _keystone_arg = "0"
  args = [
    "--breakpad=0",
    "--keystone=$_keystone_arg",
    "--scm=1",
    "--bundle_id=$chrome_mac_bundle_id",
    "--version=$electron_version.0",
  ]
}

mac_app_bundle("electron_app") {

  remove_configs = [ "//build/config/mac:strip_all" ]

  output_name = chrome_product_full_name

  info_plist_target = ":electron_app_plist"
  extra_substitutions = [
    "ATOM_PROJECT_NAME=brave",
    "CHROMIUM_BUNDLE_ID=$chrome_mac_bundle_id",
    "CHROMIUM_SHORT_NAME=$chrome_product_short_name",
  ]

  extra_configs = [
    "//build/config/compiler:wexit_time_destructors",
  ]

  sources = [
    "//electron/chromium_src/chrome/app/chrome_exe_main_mac.c",
  ]

  deps = [
    ":electron_versioned_bundle_data",
    "//electron:electron_app_resources",
    "//build/config:exe_and_shlib_deps",
    "//chrome/common:version_header",
  ]

  # Remove the default strip configuration (which strips all symbols) so that
  # a saves file can be specified.
  # if (enable_stripping) {
  #   remove_configs = [ "//build/config/mac:strip_all" ]

  #   ldflags +=
  #       [ "-Wcrl,strip,-s," + rebase_path("app/app.saves", root_build_dir) ]
  # }
}

tweak_info_plist("electron_framework_plist") {
  info_plist = "resources/framework-Info.plist"
  args = [
    "--breakpad=0",
    "--keystone=0",
    "--scm=1",
    "--branding",
    chrome_product_short_name,
  ]
}

mac_framework_bundle("electron_framework") {
  output_name = chrome_framework_name

  configs += [
    "//build/config/compiler:wexit_time_destructors",
    ":external_binaries_config"
  ]

  info_plist_target = ":electron_framework_plist"
  extra_substitutions = [
    "CHROMIUM_BUNDLE_ID=$chrome_mac_bundle_id",
    "CHROMIUM_SHORT_NAME=$chrome_product_short_name",
  ]

  public_deps = [
    ":electron_dll",
  ]

  deps = [
    "//chrome:chrome_framework_helpers",
    ":widevine_cdm_adapter",
    ":external_binaries_resources",
    "//electron:electron_framework_resources",
    "//build/config:exe_and_shlib_deps",
    ":electron_xibs",
  ]

  ldflags = [
    "-Wl,-install_name,@executable_path/../$chrome_version_full/$chrome_framework_name.framework/$chrome_framework_name",
  ]

  data_deps = [
    ":widevine_cdm_adapter",
    ":external_binaries_resources",
  ]

  if (is_component_build) {
    ldflags += [
      "-rpath",
      "@loader_path/../../../..",
      "-Wl,-reexport_library,libelectron_dll.dylib",
    ]

    data_deps += [
      ":electron_dll",
    ]
  } else {
    ldflags += [
      "-rpath",
      "@loader_path/Libraries",
    ]
  }
}

bundle_data("widevine_cdm_adapter") {
  sources = [
    "$root_out_dir/$widevine_cdm_path/widevinecdmadapter.plugin",
  ]
  outputs = [
    "{{bundle_root_dir}}/Libraries/$widevine_cdm_path/{{source_file_part}}",
  ]
  data_deps = [
    "//third_party/widevine/cdm:widevinecdm",
  ]
  public_deps = [
    "//third_party/widevine/cdm:widevinecdmadapter",
  ]
}

bundle_data("external_binaries_resources") {
  sources = [
    "$root_out_dir/Squirrel.framework",
    "$root_out_dir/ReactiveCocoa.framework",
    "$root_out_dir/Mantle.framework",
  ]

  public_deps = [
    ":external_binaries"
  ]

  outputs = [
    "{{bundle_root_dir}}/Libraries/{{source_file_part}}",
  ]
}

copy("external_binaries") {
  sources = [
    rebase_path("//electron/external_binaries/Squirrel.framework"),
    rebase_path("//electron/external_binaries/ReactiveCocoa.framework"),
    rebase_path("//electron/external_binaries/Mantle.framework"),
  ]
  outputs = [
    "$root_out_dir/{{source_file_part}}",
  ]
}

tweak_info_plist("electron_helper_plist") {
  info_plist = "resources/helper-Info.plist"
  args = [
    "--breakpad=0",
    "--keystone=0",
    "--scm=0",
  ]
}

mac_app_bundle("electron_helper_app") {
  output_name = chrome_helper_name

  info_plist_target = ":electron_helper_plist"
  extra_substitutions = [
    "CHROMIUM_BUNDLE_ID=$chrome_mac_bundle_id",
    "CHROMIUM_SHORT_NAME=$chrome_product_short_name",
  ]

  extra_configs = [ "//build/config/compiler:wexit_time_destructors" ]

  defines = [ "HELPER_EXECUTABLE" ]

  sources = [
    "//electron/chromium_src/chrome/app/chrome_exe_main_mac.c",
  ]

  deps = [
    "//build/config:exe_and_shlib_deps",
    "//chrome/common:version_header",
  ]

  ldflags = []

  if (is_component_build) {
    ldflags += [
      # The helper is in Brave.app/Contents/Frameworks/Brave Helper.app/Contents/MacOS/
      # so set rpath up to the base.
      "-rpath",
      "@loader_path/../../../../../..",
    ]
  }

  # Remove the default strip configuration (which strips all symbols) so that
  # a saves file can be specified.
  # if (enable_stripping) {
  #   remove_configs = [ "//build/config/mac:strip_all" ]

  #   ldflags +=
  #       [ "-Wcrl,strip,-s," + rebase_path("app/app.saves", root_build_dir) ]
  # }
}

action("extra_helpers") {
  script = "//build/gn_run_binary.py"
  shell_script = "//electron/vendor/brightray/tools/mac/make_more_helpers.sh"

  inputs = [
    script,
    shell_script,
    "$root_out_dir/$chrome_helper_name.app",
  ]
  outputs = [
    "$root_out_dir/$chrome_helper_name EH.app",
    "$root_out_dir/$chrome_helper_name NP.app",
  ]
  args = [
    rebase_path(shell_script, root_out_dir),
    rebase_path(root_out_dir),
    chrome_product_full_name
  ]

  deps = [
    ":electron_helper_app"
  ]
}

bundle_data("electron_versioned_bundle_data") {
  sources = [
    "$root_out_dir/$chrome_framework_name.framework",
    "$root_out_dir/$chrome_helper_name.app",
    "$root_out_dir/$chrome_helper_name EH.app",
    "$root_out_dir/$chrome_helper_name NP.app",
  ]

  outputs = [
    "{{bundle_root_dir}}/$chrome_version_full/{{source_file_part}}",
  ]

  public_deps = [
    ":electron_helper_app",
    ":extra_helpers",
    # Before bundling the versioned app components, delete any existing
    # versions.
    "//chrome:clean_up_old_versions",
    ":electron_framework",
  ]
}

# On Mac, speed up the component build by not re-bundling the framework
# every time it changes. Instead, place all the sources and their deps in
# a library that the bundled framework links (and re-exports). That way
# only the library needs to be re-linked when it changes.
if (is_component_build) {
  _dll_target_type = "shared_library"
} else {
  _dll_target_type = "source_set"
}
target(_dll_target_type, "electron_dll") {
  visibility = [
    ":electron_framework",
    ":electron_framework_shared_library",
  ]

  public_configs = [
    "//electron/build:electron_config",
  ]

  sources = [
    "//electron/atom/app/atom_main.cc",
    "//electron/atom/app/atom_main.h",
  ]

  deps = [
    "//electron:browser_dependencies",
    "//electron:child_dependencies",
    "//base",
    "//chrome/common:constants",
    "//chrome/common:version_header",
    "//components/crash/content/app",
    "//components/policy:generated",
    "//content/public/app:both",
    "//third_party/cld",
  ]

  ldflags = [
    "-ObjC",
  ]

  configs += [ "//build/config/compiler:wexit_time_destructors" ]

  if (is_component_build) {
    configs += [
      ":external_binaries_config"
    ]
  }
}

config("external_binaries_config") {
  ldflags = [
    "-F",
    rebase_path("$root_out_dir"),
    "-framework",
    "Squirrel",
    "-framework",
    "ReactiveCocoa",
    "-framework",
    "Mantle",
  ]
}

mac_xib_bundle_data("electron_xibs") {
  sources = [
    "resources/MainMenu.xib",
  ]
}

group("dist_resources") {}

group("symbol_dist_resources") {
  public_deps = [
    ":electron_dump_syms",
    ":electron_dsym_archive",
    ":generate_breakpad_symbols",
  ]
}

group("chromedriver_dist_resources") {}

# This list must be updated with the two targets' deps list below, and
# the list of _dsyms in :electron_dsym_archive.
_electron_symbols_sources = [
  "$root_out_dir/$chrome_framework_name.framework/$chrome_framework_name",
  "$root_out_dir/$chrome_helper_name.app/Contents/MacOS/$chrome_helper_name",
  "$root_out_dir/$chrome_product_full_name.app/Contents/MacOS/$chrome_product_full_name",
  "$root_out_dir/crashpad_handler",
]

action("generate_breakpad_symbols") {
  symbols_dir = "$electron_dist_dir/$electron_project_name.breakpad.syms"
  outputs = [
    symbols_dir
  ]

  sources = _electron_symbols_sources

  binaries = []
  foreach(_source, sources) {
    binaries += [ rebase_path(_source) ]
  }

  deps = [
    ":electron_app",
  ]

  script = "//electron/tools/posix/generate_breakpad_symbols.py"
  args = [
    "--symbols-dir=" + rebase_path(symbols_dir),
    "--jobs=16",
    "--build-dir=" + rebase_path(root_out_dir),
    "--binary=$binaries",
    "--libchromiumcontent-dir=" + rebase_path("//"),
    "--clear",
  ]

  deps += [
    ":electron_app",
    ":electron_framework",
    ":electron_helper_app",
    "//breakpad:dump_syms",
    "//third_party/crashpad/crashpad/handler:crashpad_handler",
  ]
}

# It is possible to run dump_syms on unstripped products without dSYMs,
# but doing so isn't logical and won't happen in practice.
action_foreach("electron_dump_syms") {
  script = "//build/redirect_stdout.py"

  sources = _electron_symbols_sources

  outputs = [
    "$root_out_dir/{{source_file_part}}-$electron_version.breakpad",
  ]

  # Use an absolute path to dump_syms in case a user has it in their path.
  args = rebase_path(outputs, root_out_dir) + [
           rebase_path("$root_out_dir/dump_syms"),
           "-g",
           rebase_path(
               "$root_out_dir/{{source_name_part}}.dSYM/Contents/Resources/DWARF/{{source_name_part}}",
               root_out_dir),
           "{{source}}",
         ]

  deps = [
    ":electron_app",
    ":electron_framework",
    ":electron_helper_app",
    "//breakpad:dump_syms",
    "//third_party/crashpad/crashpad/handler:crashpad_handler",
  ]
}

action("electron_dsym_archive") {
  script = "//chrome/tools/build/mac/archive_symbols.py"

  # These are the dSYMs that will be archived. The sources list must be
  # the target outputs that correspond to the dSYMs (since a dSYM is a
  # directory it cannot be listed as a source file). The targets that
  # generate both the dSYM and binary image are listed in deps.
  _dsyms = [
    "$root_out_dir/$chrome_framework_name.dSYM",
    "$root_out_dir/$chrome_helper_name.dSYM",
    "$root_out_dir/$chrome_product_full_name.dSYM",
    "$root_out_dir/crashpad_handler.dSYM",
  ]

  sources = _electron_symbols_sources

  _output = "$root_out_dir/$chrome_product_full_name.dSYM.tar.bz2"

  outputs = [
    _output,
  ]

  args = [ rebase_path(_output, root_out_dir) ] +
         rebase_path(_dsyms, root_out_dir)

  deps = [
    ":electron_app",
    ":electron_framework",
    ":electron_helper_app",
    "//third_party/crashpad/crashpad/handler:crashpad_handler",
  ]
}
