import("//build/buildflag_header.gni")
import("//build/config/chrome_build.gni")
import("//build/config/compiler/compiler.gni")
import("//build/config/features.gni")
import("//build/config/locales.gni")
import("//build/config/sanitizers/sanitizers.gni")
import("//build/config/ui.gni")
import("//build/config/win/manifest.gni")
import("//ui/base/ui_features.gni")
import("//v8/gni/v8.gni")
import("//build/compiled_action.gni")
import("//build/util/branding.gni")
import("//build/util/process_version.gni")
import("//media/cdm/ppapi/cdm_paths.gni")
import("//electron/build/config.gni")
import("//chrome/process_version_rc_template.gni")

group("electron_app") {
  public_deps = [
    ":electron_exe",
    ":rename_exe",
    ":rename_pdb",
  ]
}

copy("rename_exe") {
  sources = [
    "$root_out_dir/node.exe",
  ]

  outputs = [
    "$root_out_dir/brave.exe",
  ]

  deps = [
    ":electron_exe"
  ]
}

copy("rename_pdb") {
  sources = [
    "$root_out_dir/node.exe.pdb",
  ]

  outputs = [
    "$root_out_dir/brave.exe.pdb",
  ]

  deps = [
    ":electron_exe"
  ]
}

executable("electron_exe") {
  configs += [
    "//build/config/compiler:wexit_time_destructors",
    "//electron/build:electron_config",
  ]

  configs -= [ "//build/config/win:console" ]

  data_deps = [
    ":external_binaries",
    "//electron:electron_framework_resources",
    "//electron:electron_app_resources",
  ]

  sources = [
    "//electron/atom/browser/resources/win/atom.rc",
    "//electron/atom/browser/resources/win/resource.h",
    "//electron/app/resources/$electron_icon_dir/atom.ico",
    "//electron/atom/app/atom_main.cc",
    "//electron/atom/app/atom_main.h",
  ]

  deps = [
    ":electron_exe_version",
    ":electron_manifest",
    "//build/config:exe_and_shlib_deps",
    "//electron:browser_dependencies",
    "//electron:child_dependencies",
    "//base",
    "//chrome/browser:chrome_process_finder",
    "//chrome/common:constants",
    "//chrome/common:version_header",
    "//chrome/install_static:secondary_module",
    "//chrome_elf",
    "//components/crash/content/app:run_as_crashpad_handler",
    "//components/flags_ui:switches",
    "//content:sandbox_helper_win",
    "//chrome/common:features",
    "//third_party/cld",
    "//components/policy:generated",
    "//content/app/resources",
    "//net:net_resources",
    "//third_party/wtl",
    "//ui/views",
    "//ui/views/controls/webview",
    "//content/public/app:both",
    "//crypto",
    "//sandbox",
    ":widevine_cdm_adapter",
  ]

  # output filename must be node to generate the correct import library for
  # node native modules
  output_name = "node"

  ldflags = [
    "/IMPLIB:node_import.lib",
    "/DELAYLOAD:dbghelp.dll",
    "/DELAYLOAD:dwmapi.dll",
    "/DELAYLOAD:uxtheme.dll",
    "/DELAYLOAD:oleaut32.dll",
    "/DELAYLOAD:comdlg32.dll",
    "/DELAYLOAD:crypt32.dll",
    "/DELAYLOAD:cryptui.dll",
    "/DELAYLOAD:dhcpcsvc.dll",
    "/DELAYLOAD:dwmapi.dll",
    "/DELAYLOAD:imagehlp.dll",
    "/DELAYLOAD:imm32.dll",
    "/DELAYLOAD:setupapi.dll",
    "/DELAYLOAD:urlmon.dll",
    "/DELAYLOAD:winhttp.dll",
    "/DELAYLOAD:wininet.dll",
    "/DELAYLOAD:winspool.drv",
    "/DELAYLOAD:wsock32.dll",
    "/DELAYLOAD:d3d11.dll",
    "/DELAYLOAD:d3d9.dll",
    "/DELAYLOAD:dxva2.dll",
    "/DELAYLOAD:esent.dll",
    "/DELAYLOAD:API-MS-WIN-CORE-WINRT-L1-1-0.DLL",
    "/DELAYLOAD:API-MS-WIN-CORE-WINRT-STRING-L1-1-0.DLL",
    # Chrome builds with this minimum environment which makes e.g.
    # GetSystemMetrics(SM_CXSIZEFRAME) return Windows XP/2003
    # compatible metrics. See: https://crbug.com/361720
    "/SUBSYSTEM:WINDOWS,5.02",
  ]

  if (is_official_build) {
    configs -= [ "//build/config/win:default_incremental_linking" ]
    configs +=
        [ "//build/config/win:no_incremental_linking" ]
  }

  if (use_aura) {
    deps += [ "//ui/compositor" ]
  }
}

dpi_aware_manifest = "//remoting/host/win/dpi_aware.manifest"

windows_manifest("electron_manifest") {
  sources = [
    as_invoker_manifest,
    common_controls_manifest,
    default_compatibility_manifest,
    dpi_aware_manifest,
  ]
  type = "exe"
}

process_version_rc_template("electron_exe_version") {
  extra_args = [
    "-e", "INTERNAL_NAME=\"${executable_name}_exe\"",
    "-e", "ORIGINAL_FILENAME=\"$executable_name.exe\"",
  ]
  sources = []
  output = "$target_gen_dir/electron_exe_version.rc"
}

group("widevine_cdm_adapter") {
  data_deps = [
    "//third_party/widevine/cdm:widevinecdm",
  ]
  public_deps = [
    "//third_party/widevine/cdm:widevinecdmadapter",
  ]
}

copy("external_binaries") {
  sources = [
    rebase_path("//electron/external_binaries/xinput1_3.dll"),
  ]
  outputs = [
    "$root_out_dir/{{source_file_part}}",
  ]
}

action("generate_breakpad_symbols") {
  symbols_dir = "$electron_dist_dir/$electron_project_name.breakpad.syms"
  outputs = [
    symbols_dir
  ]

  args = [
    "--symbols-dir=" + rebase_path(symbols_dir),
    "--jobs=16",
    rebase_path(root_out_dir)
  ]

  deps = [
    ":electron_app",
  ]

  script = "//electron/tools/win/generate_breakpad_symbols.py"
}

group("symbol_dist_resources") {
  public_deps = [ ":generate_breakpad_symbols" ]
}

copy("dist_widevine_resources") {
  sources = [
    "$root_out_dir/$widevine_cdm_path/widevinecdmadapter.dll",
  ]
  outputs = [
    "$electron_dist_dir/$widevine_cdm_path/{{source_file_part}}"
  ]
  public_deps = [
    ":widevine_cdm_adapter",
  ]
}

copy("dist_resources") {
  sources = [
    "$root_out_dir/chrome_elf.dll",
    "$root_out_dir/xinput1_3.dll",
    "$root_shlib_dir/libEGL.dll",
    "$root_shlib_dir/libGLESv2.dll",
    "$root_out_dir/d3dcompiler_47.dll",
  ]

  outputs = [
    "$electron_dist_dir/{{source_file_part}}",
  ]

  public_deps = [
    ":external_binaries",
    "//chrome_elf",
    "//third_party/angle:copy_compiler_dll",
    "//third_party/angle:libEGL",
    "//third_party/angle:libGLESv2",
  ]
}

group("chromedriver_dist_resources") {}

