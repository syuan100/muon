import("//build/buildflag_header.gni")
import("//build/config/chrome_build.gni")
import("//build/config/compiler/compiler.gni")
import("//build/config/features.gni")
import("//build/config/locales.gni")
import("//build/config/sanitizers/sanitizers.gni")
import("//build/config/ui.gni")
import("//ui/base/ui_features.gni")
import("//v8/gni/v8.gni")
import("//build/compiled_action.gni")
import("//build/util/branding.gni")
import("//media/cdm/ppapi/cdm_paths.gni")
import("//electron/build/config.gni")

executable("electron_app") {
  output_name = executable_name

  configs += [ "//build/config/compiler:wexit_time_destructors"]
  defines = []
  deps = [
     "//electron:electron_framework_resources",
     "//electron:electron_app_resources",
     "//base",
     "//build/config:exe_and_shlib_deps",
     "//third_party/fontconfig",
     "//chrome/common:constants",
     "//chrome/common:version_header",
     "//components/crash/content/app",
     "//components/policy:generated",
     "//content/app/resources",
     "//content/public/app:both",
     "//crypto",
     "//dbus",
     "//electron:browser_dependencies",
     "//electron:child_dependencies",
     "//net:net_resources",
     "//third_party/wtl",
     "//sandbox" ,
     "//third_party/cld",
     "//third_party/speech-dispatcher",
     "//ui/compositor",
     "//ui/gfx/x",
     "//ui/events/devices/x11/",
     "//ui/views",
     "//ui/views/controls/webview/",
     "//ui/wm",
  ]

  ldflags = [
    "-Wl,-rpath=\$ORIGIN/",
    "-rdynamic",
  ]

  public_configs = [
    "//electron/build:electron_config",
  ]

  sources = [
    "//electron/atom/app/atom_main.cc",
    "//electron/atom/app/atom_main.h",
  ]
}

group("dist_resources") {}

action("generate_breakpad_symbols") {
  symbols_dir = "$electron_dist_dir/$electron_project_name.breakpad.syms"
  outputs = [
    symbols_dir
  ]

  deps = [
    ":electron_app",
  ]

  start = [ electron_project_name ]

  script = "//electron/tools/posix/generate_breakpad_symbols.py"
  args = [
    "--symbols-dir=" + rebase_path(symbols_dir),
    "--jobs=16",
    "--build-dir=" + rebase_path(root_out_dir),
    "--binary=$start",
    "--libchromiumcontent-dir=" + rebase_path("//"),
    "--clear",
  ]

  deps += [ "//breakpad:dump_syms" ]
}

action("strip_and_dump_symbols") {
  script = "//build/linux/dump_app_syms.py"

  dump_syms_label = "//breakpad:dump_syms($host_toolchain)"
  dump_syms_binary =
          get_label_info(dump_syms_label, "root_out_dir") + "/" + "dump_syms"

  deps = [
    "//electron:electron_dist_resources",
    # TODO(bridiver) - resolve duplicate symbol generation
    ":generate_breakpad_symbols",
    dump_syms_label,
  ]
  brave_binary = "$electron_dist_dir/brave"
  if (current_cpu == "x86") {
  # Use "ia32" instead of "x86" for GYP compat.
    brave_symbol_file = "$root_out_dir/brave.breakpad.ia32"
  } else {
    brave_symbol_file = "$root_out_dir/brave.breakpad.$current_cpu"
  }

  inputs = [ brave_binary, dump_syms_binary ]
  outputs = [ brave_symbol_file ]

  args = [
    "./" + rebase_path(dump_syms_binary, root_build_dir),
    "1",  # strip_binary = true
    rebase_path(brave_binary, root_build_dir),
    rebase_path(brave_symbol_file, root_build_dir),
  ]
}

group("symbol_dist_resources") {
  public_deps = [
    ":generate_breakpad_symbols",
    ":strip_and_dump_symbols",
  ]
}

group("chromedriver_dist_resources") {
  deps = [
    ":strip_and_dump_chromedriver_symbols"
  ]
}

action("strip_and_dump_chromedriver_symbols") {
  script = "//build/linux/dump_app_syms.py"
  dump_syms_label = "//breakpad:dump_syms($host_toolchain)"
  dump_syms_binary =
          get_label_info(dump_syms_label, "root_out_dir") + "/" + "dump_syms"

  chromedriver_binary = "$electron_dist_dir/chromedriver"
  if (current_cpu == "x86") {
  # Use "ia32" instead of "x86" for GYP compat.
    chromedriver_symbol_file = "$root_out_dir/chromedriver.breakpad.ia32"
  } else {
    chromedriver_symbol_file = "$root_out_dir/chromedriver.breakpad.$current_cpu"
  }

  inputs = [ chromedriver_binary, dump_syms_binary ]
  outputs = [ chromedriver_symbol_file ]

  args = [
    "./" + rebase_path(dump_syms_binary, root_build_dir),
    "1",  # strip_binary = true
    rebase_path(chromedriver_binary, root_build_dir),
    rebase_path(chromedriver_symbol_file, root_build_dir),
  ]

  deps = [
    dump_syms_label,
    "//electron:electron_chromedriver_dist_resources",
  ]
}
