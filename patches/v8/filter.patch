diff --git a/BUILD.gn b/BUILD.gn
index deedf82d11b7c53b6082af95ff6325e5e5b57f35..135118a28300d48c68191f415a0dc38661d18653 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -164,7 +164,13 @@ config("internal_config") {
 
   include_dirs = [ "." ]
 
-  if (is_component_build) {
+  if (is_win) {
+    cflags = [
+      "/wd4275",  # dll export
+    ]
+  }
+
+  if (true) {
     defines = [ "BUILDING_V8_SHARED" ]
   }
 }
diff --git a/include/v8.h b/include/v8.h
index eec2256aeab0259890925121aea55b3c04ed9811..6feee1d4455faf0e61419be6abcb0b28b2d8eb64 100644
--- a/include/v8.h
+++ b/include/v8.h
@@ -7213,6 +7213,9 @@ class V8_EXPORT Isolate {
   V8_DEPRECATE_SOON("CpuProfiler should be created with CpuProfiler::New call.",
                     CpuProfiler* GetCpuProfiler());
 
+  /** Returns the ArrayBuffer::Allocator used in this isolate. */
+  ArrayBuffer::Allocator* GetArrayBufferAllocator();
+
   /** Returns true if this isolate has a current context. */
   bool InContext();
 
diff --git a/src/api.cc b/src/api.cc
index d676a7426c69e7bc0226c33879aee34c6c2d1e5a..d6aa48505627e72ea882ad29d4da9dd7e3446df2 100644
--- a/src/api.cc
+++ b/src/api.cc
@@ -8311,6 +8311,12 @@ CpuProfiler* Isolate::GetCpuProfiler() {
 }
 
 
+ArrayBuffer::Allocator* Isolate::GetArrayBufferAllocator() {
+  i::Isolate* isolate = reinterpret_cast<i::Isolate*>(this);
+  return isolate->array_buffer_allocator();
+}
+
+
 bool Isolate::InContext() {
   i::Isolate* isolate = reinterpret_cast<i::Isolate*>(this);
   return isolate->context() != NULL;
diff --git a/src/profiler/profiler-listener.cc b/src/profiler/profiler-listener.cc
index 169b12da0770c12b24d5881a85b87853668437cc..fe9ec80a86a506bfd989c781e71c35bc12e5bef2 100644
--- a/src/profiler/profiler-listener.cc
+++ b/src/profiler/profiler-listener.cc
@@ -100,7 +100,7 @@ void ProfilerListener::CodeCreateEvent(CodeEventListener::LogEventsAndTags tag,
       int position = it.source_position().ScriptOffset();
       int line_number = script->GetLineNumber(position) + 1;
       int pc_offset = it.code_offset() + offset;
-      line_table->SetPosition(pc_offset, line_number);
+      line_table->SetPosition(pc_offset, line_number > 0 ? line_number : line);
     }
   }
   rec->entry = NewCodeEntry(
