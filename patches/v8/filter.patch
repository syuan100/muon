diff --git a/BUILD.gn b/BUILD.gn
index 494ba22f2934d6418f36afc471c47f431bf5d7b1..b3025def092496e14a067efaa193d456dfe0d6f3 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -157,7 +157,13 @@ config("internal_config") {
 
   include_dirs = [ "." ]
 
-  if (is_component_build) {
+  if (is_win) {
+    cflags = [
+      "/wd4275",  # dll export
+    ]
+  }
+
+  if (true) {
     defines = [ "BUILDING_V8_SHARED" ]
   }
 }
diff --git a/include/v8.h b/include/v8.h
index 3d5e823cde7b8578085e6e9524058e0d44c25b1a..129a601cd89bcfcaeef6c359084774b8fb6ba782 100644
--- a/include/v8.h
+++ b/include/v8.h
@@ -7148,6 +7148,9 @@ class V8_EXPORT Isolate {
   V8_DEPRECATE_SOON("CpuProfiler should be created with CpuProfiler::New call.",
                     CpuProfiler* GetCpuProfiler());
 
+  /** Returns the ArrayBuffer::Allocator used in this isolate. */
+  ArrayBuffer::Allocator* GetArrayBufferAllocator();
+
   /** Returns true if this isolate has a current context. */
   bool InContext();
 
diff --git a/src/api.cc b/src/api.cc
index 10d44feeb02106eccead280ac3bf16cd3b473fc1..ec1d583ea7d4b79889226d6bff6775888e05f43b 100644
--- a/src/api.cc
+++ b/src/api.cc
@@ -8262,6 +8262,12 @@ CpuProfiler* Isolate::GetCpuProfiler() {
 }
 
 
+ArrayBuffer::Allocator* Isolate::GetArrayBufferAllocator() {
+  i::Isolate* isolate = reinterpret_cast<i::Isolate*>(this);
+  return isolate->array_buffer_allocator();
+}
+
+
 bool Isolate::InContext() {
   i::Isolate* isolate = reinterpret_cast<i::Isolate*>(this);
   return isolate->context() != NULL;
diff --git a/src/profiler/profiler-listener.cc b/src/profiler/profiler-listener.cc
index 169b12da0770c12b24d5881a85b87853668437cc..fe9ec80a86a506bfd989c781e71c35bc12e5bef2 100644
--- a/src/profiler/profiler-listener.cc
+++ b/src/profiler/profiler-listener.cc
@@ -100,7 +100,7 @@ void ProfilerListener::CodeCreateEvent(CodeEventListener::LogEventsAndTags tag,
       int position = it.source_position().ScriptOffset();
       int line_number = script->GetLineNumber(position) + 1;
       int pc_offset = it.code_offset() + offset;
-      line_table->SetPosition(pc_offset, line_number);
+      line_table->SetPosition(pc_offset, line_number > 0 ? line_number : line);
     }
   }
   rec->entry = NewCodeEntry(
